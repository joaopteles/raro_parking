// Mocks generated by Mockito 5.1.0 from annotations
// in parking_flutter_raro/test/main_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:parking_flutter_raro/model/car_model.dart' as _i4;
import 'package:parking_flutter_raro/model/sector_model.dart' as _i6;
import 'package:parking_flutter_raro/repository/sqflte_car.dart' as _i2;
import 'package:parking_flutter_raro/repository/sqflte_park.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [SqfliteCarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSqfliteCarRepository extends _i1.Mock
    implements _i2.SqfliteCarRepository {
  MockSqfliteCarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> insertCar(_i4.CarModel? car) =>
      (super.noSuchMethod(Invocation.method(#insertCar, [car]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> updateCar(_i4.CarModel? car) =>
      (super.noSuchMethod(Invocation.method(#updateCar, [car]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.CarModel>> getAllCars() =>
      (super.noSuchMethod(Invocation.method(#getAllCars, []),
              returnValue: Future<List<_i4.CarModel>>.value(<_i4.CarModel>[]))
          as _i3.Future<List<_i4.CarModel>>);
}

/// A class which mocks [SqfliteParkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSqfliteParkRepository extends _i1.Mock
    implements _i5.SqfliteParkRepository {
  MockSqfliteParkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> insertPark(_i6.SectorModel? park) =>
      (super.noSuchMethod(Invocation.method(#insertPark, [park]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deletePark(_i6.SectorModel? park) =>
      (super.noSuchMethod(Invocation.method(#deletePark, [park]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i6.SectorModel>> getAllParks() => (super.noSuchMethod(
          Invocation.method(#getAllParks, []),
          returnValue: Future<List<_i6.SectorModel>>.value(<_i6.SectorModel>[]))
      as _i3.Future<List<_i6.SectorModel>>);
}
